<?php
namespace Famelo\Saas\Services;

use Famelo\Saas\Domain\Model\Plan;
use Famelo\Saas\Domain\Model\SaasParty;
use Famelo\Saas\Domain\Model\Transaction;
use Omnipay\Omnipay;
use TYPO3\Flow\Annotations as Flow;
use TYPO3\Flow\Configuration\ConfigurationManager;

/**
 * @Flow\Scope("singleton")
 */
class TransactionService {
	/**
	 * @var \TYPO3\Flow\Configuration\ConfigurationManager
	 * @Flow\Inject
	 */
	protected $configurationManager;

	/**
	 * @var \TYPO3\Flow\Persistence\Doctrine\PersistenceManager
	 * @Flow\Inject
	 */
	protected $persistenceManager;

	/**
	 * @var \Famelo\Saas\Domain\Repository\TransactionRepository
	 * @Flow\Inject
	 */
	protected $transactionRepository;

	/**
	 * @var SaasParty
	 */
	protected $party;

	/**
	 * @var \Famelo\Saas\Domain\Model\Plan
	 */
	protected $plan;

	/**
	 * @var \Famelo\Saas\Plan\PlanImplementationInterface
	 */
	protected $implementation;

	/**
	 * @var boolean
	 */
	protected $initialized = FALSE;

	public function __construct(\TYPO3\Flow\Security\Context $securityContext) {
		$this->party = $securityContext->getParty();
	}

	public function initialize() {
		if ($this->initialized === TRUE) {
			return;
		}

		if ($this->party->getPlan() instanceof Plan) {
			$this->plan = $this->party->getPlan();
			$planConfiguration = $this->plan->getConfiguration();
			$implementationClassName = $planConfiguration['implementation'];
			$this->implementation = new $implementationClassName($this);
		}
	}

	public function getParty() {
		$this->initialize();
		return $this->party;
	}

	public function getBalance() {
		$this->initialize();
		if ($this->plan === NULL) {
			return 0;
		}
		return $this->plan->getBalance();
	}

	public function getTransactions() {
		return $this->transactionRepository->getPartyTransactions();
	}

	public function getPlan() {
		$this->initialize();
		return $this->plan;
	}

	public function getPlans() {
		$this->initialize();
		return $this->configurationManager->getConfiguration(ConfigurationManager::CONFIGURATION_TYPE_SETTINGS, 'Famelo.Saas.Plans');
	}

	public function getPaymentGateways() {
		$this->initialize();
		return $this->configurationManager->getConfiguration(ConfigurationManager::CONFIGURATION_TYPE_SETTINGS, 'Famelo.Saas.PaymentGateways');
	}

	public function getPaymentGateway($paymentGateway) {
		$this->initialize();
		$paymentGateways = $this->getPaymentGateways();
		return $paymentGateways[$paymentGateway];
	}

	public function createPaymentGatewayInstance($paymentGateway) {
		$paymentGatewayConfiguration = $this->getPaymentGateway($paymentGateway);
		$gateway = Omnipay::create($paymentGatewayConfiguration['gateway']);

		if (isset($paymentGatewayConfiguration['parameters'])) {
			$gateway->initialize($paymentGatewayConfiguration['parameters']);
		}
		return $gateway;
	}

	public function addTransaction($transaction) {
		$this->initialize();
		$transaction = $this->implementation->addTransaction($transaction);
		$this->persistenceManager->update($this->plan);
		$this->persistenceManager->persistAll();
	}

	public function createTransaction($amount, $paymentGateway, $currency) {
		$this->initialize();
		$transaction = $this->implementation->createTransaction($amount, $paymentGateway, $currency);
		$this->persistenceManager->add($transaction);
		$this->persistenceManager->persistAll();
		return $transaction;
	}

	/**
	 * @param float amount
	 */
	public function withdraw($amount) {
		$this->initialize();
		$this->implementation->withdraw($amount);
		$this->persistenceManager->update($this->plan);
		$this->persistenceManager->persistAll();
	}

	/**
	 * @param \Famelo\Saas\Domain\Model\Transaction $transaction
	 */
	public function hasFunds($transaction) {
		$this->initialize();
		return $this->implementation->hasFunds($transaction);
	}

	public function sendInvoice($transaction) {
		$query = $this->transactionRepository->createQuery();
		$query->setOrderings(array('created' => \TYPO3\Flow\Persistence\QueryInterface::ORDER_DESCENDING));
		$query->matching($query->logicalAnd(
			$query->logicalNot($query->equals('plan', NULL)),
			$query->logicalNot($query->equals('paymentGateway', NULL)),
			$query->logicalNot($query->equals('invoiceNumber', NULL))
		));
		$query->setLimit(1);
		$lastTransaction = $query->execute()->current();

		if ($lastTransaction === FALSE) {
			$invoiceNumber = 10000;
		} else {
			$invoiceNumber = intval($lastTransaction->getInvoiceNumber());
			$invoiceNumber++;
		}
        $transaction->setInvoiceNumber($invoiceNumber);

		$invoicePath = $transaction->getInvoicePath();
		\TYPO3\Flow\Utility\Files::createDirectoryRecursively(dirname($invoicePath));

        $document = new \Famelo\PDF\Document('Famelo.Saas:Invoice');
        $document->assign('transaction', $transaction);
        $document->save($invoicePath);

        $mail = new \Famelo\Messaging\Message();
        $mail->setMessage('Famelo.Saas:Invoice')
            	->assign('transaction', $transaction)
            	->test();

        $this->persistenceManager->update($transaction);
        $this->persistenceManager->persistAll();
	}
}
?>
